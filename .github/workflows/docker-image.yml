# .github/workflows/publish-ghcr.yml
name: Build and Push to GHCR

on:
  workflow_dispatch:
  push:
    branches: [ "main" ] # 仅在 main 分支有 push 时触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 需要权限来读取仓库内容和写入 GitHub Packages (GHCR)
    permissions:
      contents: read
      packages: write

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到 GitHub Container Registry
      # 使用自动生成的 GITHUB_TOKEN 进行认证，无需手动设置 Secrets
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 使用触发工作流的 GitHub 用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 自动生成的 Token

      # (推荐) 使用 docker/metadata-action 自动生成镜像标签和元数据
      # 这会根据 Git 事件（如分支名、标签、SHA）创建合适的镜像标签
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/subcheck # 修改为你想要的镜像名
          tags: |
            # 为最新的 commit 生成 sha- 开头的标签 (例如 sha-a1b2c3d)
            type=sha,prefix=sha-
            # 如果是 main 分支，添加 latest 标签
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # 如果创建了 Git tag (例如 v1.0.0), 则使用该 tag 作为镜像标签
            type=ref,event=tag

      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true # 设置为 true，表示构建并推送
          tags: ${{ steps.meta.outputs.tags }} # 使用 metadata-action 生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用 metadata-action 生成的标签
          # 启用 GitHub Actions 缓存加速构建
          cache-from: type=gha
          cache-to: type=gha,mode=max
